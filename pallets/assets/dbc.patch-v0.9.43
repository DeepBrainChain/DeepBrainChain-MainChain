diff --git a/pallets/assets/src/functions.rs b/pallets/assets/src/functions.rs
index 1ff4022..72cb2ca 100644
--- a/pallets/assets/src/functions.rs
+++ b/pallets/assets/src/functions.rs
@@ -19,6 +19,7 @@
 
 use super::*;
 use frame_support::{traits::Get, BoundedVec};
+use sp_std::collections::btree_set::::BTreeSet;
 
 #[must_use]
 pub(super) enum DeadConsequence {
@@ -694,6 +695,150 @@ impl<T: Config<I>, I: 'static> Pallet<T, I> {
         Ok((credit, source_died))
     }
 
+    pub(super) fn do_transfer2(
+        id: T::AssetId,
+        source: &T::AccountId,
+        dest: &T::AccountId,
+        amount: T::Balance,
+        lock_duration: T::BlockNumber,
+        maybe_need_admin: Option<T::AccountId>,
+        f: TransferFlags,
+    ) -> Result<T::Balance, DispatchError> {
+        let (balance, died) = Self::transfer_and_die2(
+            id.clone(),
+            source,
+            dest,
+            amount,
+            lock_duration,
+            maybe_need_admin,
+            f,
+        )?;
+        if let Some(Remove) = died {
+            T::Freezer::died(id, source);
+        }
+        Ok(balance)
+    }
+
+    // NOTE: used for transfer and lock:
+    /// Same as `do_transfer` but it does not execute the `FrozenBalance::died` hook and
+    /// instead returns whether and how the `source` account died in this operation.
+    fn transfer_and_die2(
+        id: T::AssetId,
+        source: &T::AccountId,
+        dest: &T::AccountId,
+        amount: T::Balance,
+        lock_duration: T::BlockNumber,
+        maybe_need_admin: Option<T::AccountId>,
+        f: TransferFlags,
+    ) -> Result<(T::Balance, Option<DeadConsequence>), DispatchError> {
+        // Early exit if no-op.
+        if amount.is_zero() {
+            return Ok((amount, None))
+        }
+        let details = Asset::<T, I>::get(&id).ok_or(Error::<T, I>::Unknown)?;
+        ensure!(details.status == AssetStatus::Live, Error::<T, I>::AssetNotLive);
+
+        // Figure out the debit and credit, together with side-effects.
+        let debit = Self::prep_debit(id.clone(), source, amount, f.into())?;
+        let (credit, maybe_burn) = Self::prep_credit(id.clone(), dest, amount, debit, f.burn_dust)?;
+
+        let mut source_account =
+            Account::<T, I>::get(&id, &source).ok_or(Error::<T, I>::NoAccount)?;
+        let mut source_died: Option<DeadConsequence> = None;
+
+        Asset::<T, I>::try_mutate(&id, |maybe_details| -> DispatchResult {
+            let details = maybe_details.as_mut().ok_or(Error::<T, I>::Unknown)?;
+
+            // Check admin rights.
+            if let Some(need_admin) = maybe_need_admin {
+                ensure!(need_admin == details.admin, Error::<T, I>::NoPermission);
+            }
+
+            // Skip if source == dest
+            if source == dest {
+                return Ok(())
+            }
+
+            // Burn any dust if needed.
+            if let Some(burn) = maybe_burn {
+                // Debit dust from supply; this will not saturate since it's already checked in
+                // prep.
+                debug_assert!(details.supply >= burn, "checked in prep; qed");
+                details.supply = details.supply.saturating_sub(burn);
+            }
+
+            // Debit balance from source; this will not saturate since it's already checked in prep.
+            debug_assert!(source_account.balance >= debit, "checked in prep; qed");
+            source_account.balance = source_account.balance.saturating_sub(debit);
+
+            let now = <frame_system::Pallet<T>>::block_number();
+            let locks = AssetLocks::<T, I>::get(&id, &dest);
+            let lock = AssetLock {
+                from: source.clone(),
+                balance: credit,
+                unlock_time: lock_duration.saturating_add(now),
+            };
+
+            if let Some(lock_id) = Self::get_new_lock_id(id.clone(), &dest) {
+                match locks {
+                    Some(mut locks) => {
+                        locks.try_insert(lock_id, lock).map_err(|_| Error::<T, I>::TooManyLocks)?;
+                        AssetLocks::<T, I>::insert(&id, &dest, locks);
+                    },
+                    None => {
+                        let mut locks = BoundedBTreeMap::new();
+                        locks.try_insert(lock_id, lock).map_err(|_| Error::<T, I>::TooManyLocks)?;
+                        AssetLocks::<T, I>::insert(&id, &dest, locks);
+                    },
+                };
+
+                Locked::<T, I>::mutate(&id, &dest, |locked| {
+                    *locked = locked.saturating_add(credit);
+                });
+            } else {
+                return Err(Error::<T, I>::TooManyLocks.into())
+            }
+
+            // Remove source account if it's now dead.
+            if source_account.balance < details.min_balance {
+                debug_assert!(source_account.balance.is_zero(), "checked in prep; qed");
+                source_died =
+                    Some(Self::dead_account(source, details, &source_account.reason, false));
+                if let Some(Remove) = source_died {
+                    Account::<T, I>::remove(&id, &source);
+                    return Ok(())
+                }
+            }
+            Account::<T, I>::insert(&id, &source, &source_account);
+            Ok(())
+        })?;
+
+        Self::deposit_event(Event::TransferLocked {
+            asset_id: id,
+            from: source.clone(),
+            to: dest.clone(),
+            amount: credit,
+        });
+        Ok((credit, source_died))
+    }
+
+    pub(super) fn get_new_lock_id(asset_id: T::AssetId, who: &T::AccountId) -> Option<u32> {
+        let asset_lock = match AssetLocks::<T, I>::get(asset_id, who) {
+            None => return Some(0),
+            Some(asset_lock) => asset_lock,
+        };
+        let ids: BTreeSet<_> = asset_lock.keys().cloned().collect();
+
+        // 允许最多1000个locked_transfer
+        let lock_limit = AssetLockLimit::get();
+        for id in 0..lock_limit {
+            if !ids.contains(&id) {
+                return Some(id)
+            }
+        }
+        None
+    }
+
     /// Create a new asset without taking a deposit.
     ///
     /// * `id`: The `AssetId` you want the new asset to have. Must not already be in use.
diff --git a/pallets/assets/src/lib.rs b/pallets/assets/src/lib.rs
index 0100851..8de1a44 100644
--- a/pallets/assets/src/lib.rs
+++ b/pallets/assets/src/lib.rs
@@ -167,13 +167,14 @@ use sp_std::prelude::*;
 use frame_support::{
     dispatch::{DispatchError, DispatchResult},
     ensure,
-    pallet_prelude::DispatchResultWithPostInfo,
+    pallet_prelude::{ConstU32, DispatchResultWithPostInfo},
     storage::KeyPrefixIterator,
     traits::{
         tokens::{fungibles, DepositConsequence, WithdrawConsequence},
         BalanceStatus::Reserved,
         Currency, EnsureOriginWithArg, ReservableCurrency, StoredMap,
     },
+    BoundedBTreeMap,
 };
 use frame_system::Config as SystemConfig;
 
@@ -183,6 +184,8 @@ pub use weights::WeightInfo;
 type AccountIdLookupOf<T> = <<T as frame_system::Config>::Lookup as StaticLookup>::Source;
 const LOG_TARGET: &str = "runtime::assets";
 
+type AssetLockLimit = ConstU32<1000>;
+
 /// Trait with callbacks that are executed after successfull asset creation or destruction.
 pub trait AssetsCallback<AssetId, AccountId> {
     /// Indicates that asset with `id` was successfully created by the `owner`
@@ -368,6 +371,27 @@ pub mod pallet {
         ValueQuery,
     >;
 
+    #[pallet::storage]
+    pub(super) type AssetLocks<T: Config<I>, I: 'static = ()> = StorageDoubleMap<
+        _,
+        Blake2_128Concat,
+        T::AssetId,
+        Blake2_128Concat,
+        T::AccountId,
+        ApprovalsOf<T, I>, // BTreeMap<u32, AssetLock<T::AccountId, T::Balance, T::BlockNumber>>,
+    >;
+
+    #[pallet::storage]
+    pub(super) type Locked<T: Config<I>, I: 'static = ()> = StorageDoubleMap<
+        _,
+        Blake2_128Concat,
+        T::AssetId,
+        Blake2_128Concat,
+        T::AccountId,
+        T::Balance,
+        ValueQuery,
+    >;
+
     #[pallet::genesis_config]
     #[derive(frame_support::DefaultNoBound)]
     pub struct GenesisConfig<T: Config<I>, I: 'static = ()> {
@@ -578,6 +602,20 @@ pub mod pallet {
             asset_id: T::AssetId,
             who: T::AccountId,
         },
+        // Transfer and lock: asset_id, from, to, amount, lock_duration
+        TransferLocked {
+            asset_id: T::AssetId,
+            from: T::AccountId,
+            to: T::AccountId,
+            amount: T::Balance,
+        },
+        // Unlock: asset_id, amount
+        Unlocked {
+            asset_id: T::AssetId,
+            from: T::AccountId,
+            to: T::AccountId,
+            amount: T::Balance,
+        },
     }
 
     #[pallet::error]
@@ -625,6 +663,9 @@ pub mod pallet {
         NotFrozen,
         /// Callback action resulted in error
         CallbackFailed,
+        AmountZero,
+        TooManyLocks,
+        TimeNowAllowed,
     }
 
     #[pallet::call(weight(<T as Config<I>>::WeightInfo))]
@@ -1690,6 +1731,90 @@ pub mod pallet {
             Self::deposit_event(Event::<T, I>::Blocked { asset_id: id, who });
             Ok(())
         }
+
+        #[pallet::call_index(32)]
+        #[pallet::weight(T::WeightInfo::transfer())]
+        pub fn transfer_and_lock(
+            origin: OriginFor<T>,
+            id: T::AssetId,
+            target: AccountIdLookupOf<T>,
+            amount: T::Balance,
+            lock_duration: BlockNumberFor<T>,
+        ) -> DispatchResult {
+            let origin = ensure_signed(origin)?;
+            let dest = T::Lookup::lookup(target)?;
+            let id: T::AssetId = id.into();
+
+            let f = TransferFlags { keep_alive: false, best_effort: false, burn_dust: false };
+            Self::do_transfer2(id, &origin, &dest, amount, lock_duration, None, f).map(|_| ())
+        }
+
+        #[pallet::call_index(33)]
+        #[pallet::weight(T::WeightInfo::transfer())]
+        pub fn unlock(origin: OriginFor<T>, id: T::AssetId, lock_index: u32) -> DispatchResult {
+            let origin = ensure_signed(origin)?;
+            let now = <frame_system::Pallet<T>>::block_number();
+
+            let mut locks = match AssetLocks::<T, I>::get(id.clone(), &origin) {
+                None => BoundedBTreeMap::new(),
+                Some(locks) => locks,
+            };
+
+            let lock = locks.get(&lock_index).cloned().ok_or(Error::<T, I>::Unknown)?;
+
+            ensure!(now >= lock.unlock_time, Error::<T, I>::TimeNowAllowed);
+
+            Asset::<T, I>::try_mutate(id.clone(), |maybe_details| -> DispatchResult {
+                let details = maybe_details.as_mut().ok_or(Error::<T, I>::Unknown)?;
+
+                Account::<T, I>::try_mutate(
+                    id.clone(),
+                    &origin,
+                    |maybe_account| -> DispatchResult {
+                        match maybe_account {
+                            Some(ref mut account) => {
+                                // Calculate new balance; this will not saturate since it's already checked
+                                // in prep.
+                                debug_assert!(
+                                    account.balance.checked_add(&lock.balance).is_some(),
+                                    "checked in prep; qed"
+                                );
+                                account.balance.saturating_accrue(lock.balance);
+                            },
+                            maybe_account @ None => {
+                                *maybe_account = Some(AssetAccountOf::<T, I> {
+                                    balance: lock.balance,
+                                    reason: Self::new_account(&origin, details, None)?,
+                                    status: AccountStatus::Liquid,
+                                    extra: T::Extra::default(),
+                                });
+                            },
+                        }
+                        Ok(())
+                    },
+                )
+            })?;
+
+            // 如果长度为0，则移除该记录
+            locks.remove(&lock_index);
+            if locks.is_empty() {
+                AssetLocks::<T, I>::remove(id.clone(), &origin);
+                Locked::<T, I>::remove(id.clone(), &origin);
+            } else {
+                AssetLocks::<T, I>::insert(id.clone(), &origin, locks);
+                Locked::<T, I>::mutate(id.clone(), &origin, |locked| {
+                    *locked = locked.saturating_sub(lock.balance)
+                });
+            }
+
+            Self::deposit_event(Event::Unlocked {
+                asset_id: id,
+                from: lock.from,
+                to: origin,
+                amount: lock.balance,
+            });
+            Ok(().into())
+        }
     }
 
     /// Implements [`AccountTouch`] trait.
diff --git a/pallets/assets/src/types.rs b/pallets/assets/src/types.rs
index 0104aed..9d6a7f6 100644
--- a/pallets/assets/src/types.rs
+++ b/pallets/assets/src/types.rs
@@ -319,3 +319,25 @@ where
             .saturating_mul_int(balance))
     }
 }
+
+use frame_support::BoundedBTreeMap;
+pub(super) type ApprovalsOf<T, I = ()> = BoundedBTreeMap<
+    u32,
+    AssetLock<
+        <T as SystemConfig>::AccountId,
+        <T as Config<I>>::Balance,
+        <T as SystemConfig>::BlockNumber,
+    >,
+    AssetLockLimit,
+>;
+
+#[derive(Clone, Encode, Decode, Eq, PartialEq, RuntimeDebug, Default, MaxEncodedLen, TypeInfo)]
+pub(super) struct AssetLock<
+    AccountId: Encode + Decode + Clone + Eq + PartialEq,
+    Balance: Encode + Decode + Clone + Eq + PartialEq,
+    BlockNumber: Encode + Decode + Clone + Eq + PartialEq,
+> {
+    pub from: AccountId,
+    pub balance: Balance,
+    pub unlock_time: BlockNumber,
+}
